Repo,Owner,Name,Description,LastUpdate
https://github.com/senecajs/seneca,senecajs,seneca,'A microservices toolkit for Node.js.',2021-06-14
https://github.com/rjrodger/seneca-examples,rjrodger,seneca-examples,'Node.js seneca module usage examples ',2021-06-09
https://github.com/nodezoo/nodezoo-workshop,nodezoo,nodezoo-workshop,'A microservices workshop for the Seneca framework.',2021-02-24
https://github.com/CaptGreg/SenecaOOP345-attic,CaptGreg,SenecaOOP345-attic,'This folder, attic, contains code fragments.   Like most attics, this attic needs a good cleaning.  Some fragments are from the usual places on the web, cplusplus.com, stackoverflow, etc.  Some fragments are DIY code written in class.  Some fragments are as-is as found on the web while others are heavily modified to make work or add functionality.   Some fragments are useful, some are not.  Most fragments work, some don't.  Notable Useful Fragments ========================  fastforward.cpp  - a summary of OOP345.  funcptr.cpp - examples of the many ways of passing function names to other functions:               direct call, c-style function pointer, c++-style function pointer, function object (functor), lambda, bind               examples of intersting functions to pass function to: thread, async, packaged_task  sp?.cpp     - smart pointer resources  mi-*.cpp    - multiple inheritance resources, clone+diamond problem  theading?01?.cpp - threading101?.cpp - basic threading, mutexes                  - threading201?.cpp - futires and promises                  - threading301?.cpp - async, packaged_task                  - threading401?.cpp - how things were done before async + packaged task  thread-*.cpp     - cool thread code, such as thread pools  ll*.cpp          - linked list code  moveSimple.cpp   - move semantics  stl-calc-*.cpp   - postfix calculator using stl stack, list, vector, deque containers  vectorchar*.cpp  - how to make a string class mased on std::vector<char>  dp-composite*.cpp  - composite (tree) design pattern code  alarmsetjmp.cpp + setjmp*.cpp - use alarm and setjmp to do interesting things  swap.cpp          - swapping data in place (without using a temporary) using xor and add operators.  asmlist.cpp       - how to generate an in-line assembler listing of the code generated by the compiler  popen.cpp         - how to start up a pipe to a program and read the output from the program  folder threading-concurrency_in_action                   - pdf and sample code from Concurancy in Action book',2021-03-19
https://github.com/senecajs/seneca-mesh,senecajs,seneca-mesh,'Mesh your Seneca.js microservices together - no more service discovery!',2020-11-25
https://github.com/senecajs/seneca-web,senecajs,seneca-web,'Http route mapping for Seneca microservices.',2020-11-12
https://github.com/senecajs/seneca-transport,senecajs,seneca-transport,'Seneca micro-services message transport over TCP and HTTP.',2021-05-18
https://github.com/senecajs/senecajs.org,senecajs,senecajs.org,'Documentation site for Seneca.js',2021-01-26
https://github.com/senecajs/seneca-in-practice,senecajs,seneca-in-practice,'Seneca.js (http://senecajs.org/) NodeSchool workshop',2021-05-12
https://github.com/senecajs/seneca-postgres-store,senecajs,seneca-postgres-store,'PostgreSQL plugin for Seneca',2018-11-02
